* Write Arbitrary instance for PTNets and write QuickCheck tests
* M-bisimilarity
  - think of performing the check without statespace
  - better types?
* PTConstr
  - Make `label' more abstract/general? (Attach labels to positions)
  - Figure how to use a Monoid (and some typeclass for PTConstr)
    to replace 'toPTNet' with more general 'toNet'
* NPConstr
  - toSArc function: change to make use of possible monoidal structure of SArc?
* XMLReader
  - parser error handling
  - Power у monoms
  - Добавить тестов 
  - Различать tokenAtomic и сетевые токены
  - Переменные на переходах -> переменные на дугах
  - Instances у typeAtomic
  - Variables в элементных сетях 
  - Marking // map // marking
* PROJECT Unfoldings
** WAITING Faster PossibleExtentions procedure
*** Faster search for conflicts
*** Pairwise search for concurrency places can be improved
    We go through a loop that executes (at most) k iterations. We use
    a variable C, which after i iterations stores the set C(p1) ∪
    . . . ∪ C(pi) (the initial value of C is the empty set). In the
    ith iteration we compute C(pi) and check whether it contains any
    of p1,...,pk. If so, pi is causally related to at least one of
    p1,...,pk, and we stop. If not, we check whether C ∩C(pi) contains
    some place having two output events e ∈ C\C(pi) and e′ ∈
    C(pi)\C. If so, pi is in conflict with at least one of
    p1,...,pi−1, and we stop. If not, we add C(pi) to C, and continue
    with the next iteration.
*** UpdatePotExt
** TODO Refactor pred* to work on general nets
